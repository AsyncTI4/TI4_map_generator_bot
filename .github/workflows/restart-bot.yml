on: workflow_dispatch
name: RestartBot
concurrency:
  group: "Start Bot"
jobs:
  build:
    name: Restart Bot
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      env:
        AWS_KEY: ${{ secrets.IMG_AWS_KEY }}
        AWS_SECRET: ${{ secrets.IMG_AWS_SECRET }}
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        DISCORD_BOT_USERID: ${{ secrets.DISCORD_BOT_USERID }}
        REPO_DISPATCH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
        TI4_ULTIMATE_STATISTICS_API_KEY: ${{ secrets.TI4_ULTIMATE_STATISTICS_API_KEY }}
        MANAGEMENT_ENDPOINTS_ACTUATOR_API_KEY: ${{ secrets.MANAGEMENT_ENDPOINTS_ACTUATOR_API_KEY }}
        GUILDID_LIST: ${{ secrets.GUILDID_LIST }}
      with:
        host: ${{ secrets.HOSTINGER_SSH_HOST }}
        username: ${{ secrets.HOSTINGER_SSH_USER }}
        password: ${{ secrets.HOSTINGER_SSH_PASSWORD }}
        port: ${{ secrets.HOSTINGER_SSH_PORT }}
        envs: AWS_KEY, AWS_SECRET, DISCORD_BOT_TOKEN, DISCORD_BOT_USERID, REPO_DISPATCH_TOKEN, TI4_ULTIMATE_STATISTICS_API_KEY, MANAGEMENT_ENDPOINTS_ACTUATOR_API_KEY, GUILDID_LIST
        script: |
          set -eu
          
          cd ${{ vars.HOST_TI4_REPO_DIR }}
          
          echo "Building docker image..."
          docker version
          docker build -t tibot .
          
          echo "Restarting TIBot... giving 600 seconds to shutdown"
          docker stop $(docker ps -q) --time 600
          
          echo "Starting Container..."
          docker run -v ${{ vars.HOST_TI4_SAVES_DIR }}:/opt/STORAGE -p 8081:8081 -d --restart unless-stopped -m 7g -e TI4_ULTIMATE_STATISTICS_API_KEY=$TI4_ULTIMATE_STATISTICS_API_KEY -e MANAGEMENT_ENDPOINTS_ACTUATOR_API_KEY=$MANAGEMENT_ENDPOINTS_ACTUATOR_API_KEY -e REPO_DISPATCH_TOKEN=$REPO_DISPATCH_TOKEN -e AWS_ACCESS_KEY_ID=$AWS_KEY -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET tibot $DISCORD_BOT_TOKEN $DISCORD_BOT_USERID $GUILDID_LIST
          echo "Cleaning up docker stuff..."
          
          docker rm $(docker ps --filter status=exited -q) || true
          docker rmi -f $(docker images --filter "dangling=true" -q) || true
          
          echo "DONE!"